package functionalityTest

import model.functionality.DistanceRank
import model.graphs.DirectedGraph
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test

class DistanceRankTest() {
    val graph = DirectedGraph<Int>()
    @Test
    fun test() {
        for(i in 1..100) graph.addVertex(i)
        graph.addEdge(1, 2)
        graph.addEdge(1, 3)
        graph.addEdge(1, 4)
        graph.addEdge(2, 5)
        graph.addEdge(2, 6)
        graph.addEdge(3, 6)
        graph.addEdge(3, 7)
        graph.addEdge(4, 7)
        graph.addEdge(4, 8)
        graph.addEdge(5, 9)
        graph.addEdge(5, 10)
        graph.addEdge(6, 10)
        graph.addEdge(6, 11)
        graph.addEdge(7, 11)
        graph.addEdge(7, 12)
        graph.addEdge(8, 12)
        graph.addEdge(8, 13)
        graph.addEdge(9, 14)
        graph.addEdge(9, 15)
        graph.addEdge(10, 15)
        graph.addEdge(10, 16)
        graph.addEdge(11, 16)
        graph.addEdge(11, 17)
        graph.addEdge(12, 17)
        graph.addEdge(12, 18)
        graph.addEdge(13, 18)
        graph.addEdge(13, 19)
        graph.addEdge(14, 20)
        graph.addEdge(14, 21)
        graph.addEdge(15, 21)
        graph.addEdge(15, 22)
        graph.addEdge(16, 22)
        graph.addEdge(16, 23)
        graph.addEdge(17, 23)
        graph.addEdge(17, 24)
        graph.addEdge(18, 24)
        graph.addEdge(18, 25)
        graph.addEdge(19, 25)
        graph.addEdge(19, 26)
        graph.addEdge(20, 27)
        graph.addEdge(20, 28)
        graph.addEdge(21, 28)
        graph.addEdge(21, 29)
        graph.addEdge(22, 29)
        graph.addEdge(22, 30)
        graph.addEdge(23, 30)
        graph.addEdge(24, 25)
        graph.addEdge(25, 26)
        graph.addEdge(26, 27)
        graph.addEdge(27, 28)
        graph.addEdge(28, 29)
        graph.addEdge(29, 30)
        graph.addEdge(30, 31)
        graph.addEdge(31, 32)
        graph.addEdge(31, 33)
        graph.addEdge(32, 34)
        graph.addEdge(33, 35)
        graph.addEdge(34, 36)
        graph.addEdge(35, 37)
        graph.addEdge(36, 38)
        graph.addEdge(37, 39)
        graph.addEdge(38, 40)
        graph.addEdge(39, 41)
        graph.addEdge(40, 42)
        graph.addEdge(41, 43)
        graph.addEdge(42, 44)
        graph.addEdge(43, 45)
        graph.addEdge(44, 46)
        graph.addEdge(45, 47)
        graph.addEdge(46, 48)
        graph.addEdge(47, 49)
        graph.addEdge(48, 50)
        graph.addEdge(49, 51)
        graph.addEdge(50, 52)
        graph.addEdge(51, 53)
        graph.addEdge(52, 54)
        graph.addEdge(53, 55)
        graph.addEdge(54, 56)
        graph.addEdge(55, 57)
        graph.addEdge(56, 58)
        graph.addEdge(57, 59)
        graph.addEdge(58, 60)
        graph.addEdge(59, 61)
        graph.addEdge(60, 62)
        graph.addEdge(61, 63)
        graph.addEdge(62, 64)
        graph.addEdge(63, 65)
        graph.addEdge(64, 66)
        graph.addEdge(65, 67)
        graph.addEdge(66, 68)
        graph.addEdge(67, 69)
        graph.addEdge(68, 70)
        graph.addEdge(69, 71)
        graph.addEdge(70, 72)
        graph.addEdge(71, 73)
        graph.addEdge(72, 74)
        graph.addEdge(73, 75)
        graph.addEdge(74, 76)
        graph.addEdge(75, 77)
        graph.addEdge(76, 78)
        graph.addEdge(77, 79)
        graph.addEdge(78, 80)
        graph.addEdge(79, 81)
        graph.addEdge(80, 82)
        graph.addEdge(81, 83)
        graph.addEdge(82, 84)
        graph.addEdge(83, 85)
        graph.addEdge(84, 86)
        graph.addEdge(85, 87)
        graph.addEdge(86, 88)
        graph.addEdge(87, 89)
        graph.addEdge(88, 90)
        graph.addEdge(89, 91)
        graph.addEdge(90, 92)
        graph.addEdge(91, 93)
        graph.addEdge(92, 94)
        graph.addEdge(93, 95)
        graph.addEdge(94, 96)
        graph.addEdge(95, 97)
        graph.addEdge(96, 98)
        graph.addEdge(97, 99)
        graph.addEdge(98, 100)
        graph.addEdge(99, 1)
        graph.addEdge(50, 75)
        graph.addEdge(60, 45)
        graph.addEdge(70, 55)
        graph.addEdge(80, 35)
        graph.addEdge(90, 25)


        val result = DistanceRank(graph).rank()
        assertEquals(1, result)
    }
}